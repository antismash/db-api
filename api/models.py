# Autogenerated file, do not edit manually! Run generate_model.sh to update instead
# coding: utf-8
from flask_sqlalchemy import SQLAlchemy


db = SQLAlchemy()



class AsDomainProfile(db.Model):
    __tablename__ = 'as_domain_profiles'
    __table_args__ = {'schema': 'antismash'}

    as_domain_profile_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text, nullable=False)
    description = db.Column(db.Text, nullable=False)
    database = db.Column(db.Text, nullable=False)
    type = db.Column(db.Text)



class AsDomainSubtype(db.Model):
    __tablename__ = 'as_domain_subtypes'
    __table_args__ = {'schema': 'antismash'}

    subtype = db.Column(db.Text, primary_key=True)
    description = db.Column(db.Text)



class AsDomain(db.Model):
    __tablename__ = 'as_domains'
    __table_args__ = {'schema': 'antismash'}

    as_domain_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    detection = db.Column(db.Text)
    score = db.Column(db.Float(53))
    evalue = db.Column(db.Float(53))
    translation = db.Column(db.Text)
    pks_signature = db.Column(db.Text)
    minowa = db.Column(db.Text)
    nrps_predictor = db.Column(db.Text)
    stachelhaus = db.Column(db.Text)
    consensus = db.Column(db.Text)
    kr_activity = db.Column(db.Boolean)
    kr_stereochemistry = db.Column(db.Text)
    as_domain_profile_id = db.Column(db.ForeignKey('antismash.as_domain_profiles.as_domain_profile_id', ondelete='CASCADE'))
    location = db.Column(db.Text, nullable=False)
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), index=True)
    module_id = db.Column(db.ForeignKey('antismash.modules.module_id', ondelete='SET NULL'))
    function_id = db.Column(db.ForeignKey('antismash.module_domain_functions.function_id', ondelete='SET NULL'))
    follows = db.Column(db.ForeignKey('antismash.as_domains.as_domain_id', ondelete='SET NULL'))

    as_domain_profile = db.relationship('AsDomainProfile', primaryjoin='AsDomain.as_domain_profile_id == AsDomainProfile.as_domain_profile_id', backref='as_domains')
    cds = db.relationship('Cds', primaryjoin='AsDomain.cds_id == Cds.cds_id', backref='as_domains')
    parent = db.relationship('AsDomain', remote_side=[as_domain_id], primaryjoin='AsDomain.follows == AsDomain.as_domain_id', backref='as_domains')
    function = db.relationship('ModuleDomainFunction', primaryjoin='AsDomain.function_id == ModuleDomainFunction.function_id', backref='as_domains')
    module = db.relationship('Module', primaryjoin='AsDomain.module_id == Module.module_id', backref='as_domains')
    as_domain_subtypes = db.relationship('AsDomainSubtype', secondary='antismash.rel_as_domain_to_subtype', backref='as_domains')



class BgcRule(db.Model):
    __tablename__ = 'bgc_rules'
    __table_args__ = {'schema': 'antismash'}

    bgc_rule_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    rule = db.Column(db.Text)
    bgc_type_id = db.Column(db.ForeignKey('antismash.bgc_types.bgc_type_id'))

    bgc_type = db.relationship('BgcType', primaryjoin='BgcRule.bgc_type_id == BgcType.bgc_type_id', backref='bgc_rules')



class BgcType(db.Model):
    __tablename__ = 'bgc_types'
    __table_args__ = {'schema': 'antismash'}

    bgc_type_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    term = db.Column(db.Text, unique=True)
    description = db.Column(db.Text)
    parent_id = db.Column(db.ForeignKey('antismash.bgc_types.bgc_type_id'))

    parent = db.relationship('BgcType', remote_side=[bgc_type_id], primaryjoin='BgcType.parent_id == BgcType.bgc_type_id', backref='bgc_types')
    regions = db.relationship('Region', secondary='antismash.rel_regions_types', backref='bgc_types')
    candidates = db.relationship('Candidate', secondary='antismash.rel_candidates_types', backref='bgc_types')



class BindingSite(db.Model):
    __tablename__ = 'binding_sites'
    __table_args__ = {'schema': 'antismash'}

    binding_site_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    regulator_id = db.Column(db.ForeignKey('antismash.regulators.regulator_id'), nullable=False)
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id'), nullable=False)
    score = db.Column(db.Float(53), nullable=False)
    start = db.Column(db.Integer, nullable=False)
    confidence_id = db.Column(db.ForeignKey('antismash.regulator_confidence.confidence_id'), nullable=False)

    confidence = db.relationship('RegulatorConfidence', primaryjoin='BindingSite.confidence_id == RegulatorConfidence.confidence_id', backref='binding_sites')
    region = db.relationship('Region', primaryjoin='BindingSite.region_id == Region.region_id', backref='binding_sites')
    regulator = db.relationship('Regulator', primaryjoin='BindingSite.regulator_id == Regulator.regulator_id', backref='binding_sites')



class CandidateType(db.Model):
    __tablename__ = 'candidate_types'
    __table_args__ = {'schema': 'antismash'}

    candidate_type_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    description = db.Column(db.Text, nullable=False)



class Candidate(db.Model):
    __tablename__ = 'candidates'
    __table_args__ = {'schema': 'antismash'}

    candidate_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'), nullable=False)
    location = db.Column(db.Text, nullable=False)
    candidate_type_id = db.Column(db.ForeignKey('antismash.candidate_types.candidate_type_id', ondelete='CASCADE'), nullable=False)
    smiles = db.Column(db.Text)
    polymer = db.Column(db.Text)

    candidate_type = db.relationship('CandidateType', primaryjoin='Candidate.candidate_type_id == CandidateType.candidate_type_id', backref='candidates')
    region = db.relationship('Region', primaryjoin='Candidate.region_id == Region.region_id', backref='candidates')
    protoclusters = db.relationship('Protocluster', secondary='antismash.rel_candidates_protoclusters', backref='candidates')
    modules = db.relationship('Module', secondary='antismash.rel_candidates_modules', backref='candidates')
    cdss = db.relationship('Cds', secondary='antismash.rel_cds_candidates', backref='candidates')



class Cds(db.Model):
    __tablename__ = 'cdss'
    __table_args__ = {'schema': 'antismash'}

    cds_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    functional_class_id = db.Column(db.ForeignKey('antismash.functional_classes.functional_class_id'))
    locus_tag = db.Column(db.Text, index=True)
    name = db.Column(db.Text)
    product = db.Column(db.Text)
    protein_id = db.Column(db.Text)
    translation = db.Column(db.Text)
    location = db.Column(db.Text, nullable=False)
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'))

    functional_class = db.relationship('FunctionalClass', primaryjoin='Cds.functional_class_id == FunctionalClass.functional_class_id', backref='cdss')
    region = db.relationship('Region', primaryjoin='Cds.region_id == Region.region_id', backref='cdss')
    protoclusters = db.relationship('Protocluster', secondary='antismash.rel_cds_protoclusters', backref='cdss')



class ClusterCompareHit(db.Model):
    __tablename__ = 'cluster_compare_hits'
    __table_args__ = (
        db.CheckConstraint('(((region_id IS NOT NULL))::integer + ((protocluster_id IS NOT NULL))::integer) = 1'),
        {'schema': 'antismash'}
    )

    hit_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'))
    protocluster_id = db.Column(db.ForeignKey('antismash.protoclusters.protocluster_id', ondelete='CASCADE'))
    reference_accession = db.Column(db.Text, nullable=False, index=True)
    description = db.Column(db.Text)
    score = db.Column(db.Float, nullable=False)
    identity_metric = db.Column(db.Float, nullable=False)
    order_metric = db.Column(db.Float)
    components_metric = db.Column(db.Float)

    protocluster = db.relationship('Protocluster', primaryjoin='ClusterCompareHit.protocluster_id == Protocluster.protocluster_id', backref='cluster_compare_hits')
    region = db.relationship('Region', primaryjoin='ClusterCompareHit.region_id == Region.region_id', backref='cluster_compare_hits')



class ClusterblastAlgorithm(db.Model):
    __tablename__ = 'clusterblast_algorithms'
    __table_args__ = {'schema': 'antismash'}

    algorithm_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text)



class ClusterblastHit(db.Model):
    __tablename__ = 'clusterblast_hits'
    __table_args__ = {'schema': 'antismash'}

    clusterblast_hit_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'), nullable=False)
    rank = db.Column(db.Integer, nullable=False)
    acc = db.Column(db.Text, nullable=False)
    description = db.Column(db.Text, nullable=False)
    similarity = db.Column(db.Integer, nullable=False)
    algorithm_id = db.Column(db.ForeignKey('antismash.clusterblast_algorithms.algorithm_id'))

    algorithm = db.relationship('ClusterblastAlgorithm', primaryjoin='ClusterblastHit.algorithm_id == ClusterblastAlgorithm.algorithm_id', backref='clusterblast_hits')
    region = db.relationship('Region', primaryjoin='ClusterblastHit.region_id == Region.region_id', backref='clusterblast_hits')



class ComparippsonAsdbReference(db.Model):
    __tablename__ = 'comparippson_asdb_references'
    __table_args__ = {'schema': 'antismash'}

    comparippson_asdb_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), nullable=False)
    product = db.Column(db.Text, nullable=False)

    cds = db.relationship('Cds', primaryjoin='ComparippsonAsdbReference.cds_id == Cds.cds_id', backref='comparippson_asdb_references')



class ComparippsonHit(db.Model):
    __tablename__ = 'comparippson_hits'
    __table_args__ = (
        db.CheckConstraint('(((comparippson_asdb_id IS NOT NULL))::integer + ((comparippson_mibig_id IS NOT NULL))::integer) = 1'),
        {'schema': 'antismash'}
    )

    comparippson_hit_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'))
    similarity = db.Column(db.Float, nullable=False)
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'))
    comparippson_mibig_id = db.Column(db.ForeignKey('antismash.comparippson_mibig_references.comparippson_mibig_id', ondelete='CASCADE'))
    comparippson_asdb_id = db.Column(db.ForeignKey('antismash.comparippson_asdb_references.comparippson_asdb_id', ondelete='CASCADE'))

    cds = db.relationship('Cds', primaryjoin='ComparippsonHit.cds_id == Cds.cds_id', backref='comparippson_hits')
    comparippson_asdb = db.relationship('ComparippsonAsdbReference', primaryjoin='ComparippsonHit.comparippson_asdb_id == ComparippsonAsdbReference.comparippson_asdb_id', backref='comparippson_hits')
    comparippson_mibig = db.relationship('ComparippsonMibigReference', primaryjoin='ComparippsonHit.comparippson_mibig_id == ComparippsonMibigReference.comparippson_mibig_id', backref='comparippson_hits')
    region = db.relationship('Region', primaryjoin='ComparippsonHit.region_id == Region.region_id', backref='comparippson_hits')



class ComparippsonMibigReference(db.Model):
    __tablename__ = 'comparippson_mibig_references'
    __table_args__ = {'schema': 'antismash'}

    comparippson_mibig_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    accession = db.Column(db.Text, nullable=False)
    name = db.Column(db.Text, nullable=False)
    product = db.Column(db.Text, nullable=False)
    compound = db.Column(db.Text, nullable=False)



class DnaSequence(db.Model):
    __tablename__ = 'dna_sequences'
    __table_args__ = {'schema': 'antismash'}

    dna = db.Column(db.Text)
    md5 = db.Column(db.Text)
    accession = db.Column(db.Text, primary_key=True)
    definition = db.Column(db.Text)
    contig_type = db.Column(db.Integer)
    chromosome_type = db.Column(db.Integer)
    record_number = db.Column(db.Integer)
    version = db.Column(db.Integer)
    genome_id = db.Column(db.ForeignKey('antismash.genomes.genome_id', ondelete='CASCADE'))

    genome = db.relationship('Genome', primaryjoin='DnaSequence.genome_id == Genome.genome_id', backref='dna_sequences')



class Filename(db.Model):
    __tablename__ = 'filenames'
    __table_args__ = {'schema': 'antismash'}

    assembly_id = db.Column(db.Text, primary_key=True)
    base_filename = db.Column(db.Text)



class FunctionalClass(db.Model):
    __tablename__ = 'functional_classes'
    __table_args__ = {'schema': 'antismash'}

    functional_class_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text)
    parent_id = db.Column(db.ForeignKey('antismash.functional_classes.functional_class_id'))

    parent = db.relationship('FunctionalClass', remote_side=[functional_class_id], primaryjoin='FunctionalClass.parent_id == FunctionalClass.functional_class_id', backref='functional_classes')



class GeneOntology(db.Model):
    __tablename__ = 'gene_ontologies'
    __table_args__ = {'schema': 'antismash'}

    go_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    identifier = db.Column(db.Text, nullable=False, unique=True)
    description = db.Column(db.Text, nullable=False)

    pfam_domains = db.relationship('PfamDomain', secondary='antismash.pfam_go_entries', backref='gene_ontologies')



class Gene(db.Model):
    __tablename__ = 'genes'
    __table_args__ = {'schema': 'antismash'}

    gene_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    locus_tag = db.Column(db.Text, index=True)
    location = db.Column(db.Text, nullable=False)
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'))

    region = db.relationship('Region', primaryjoin='Gene.region_id == Region.region_id', backref='genes')



class Genome(db.Model):
    __tablename__ = 'genomes'
    __table_args__ = {'schema': 'antismash'}

    genome_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    tax_id = db.Column(db.ForeignKey('antismash.taxa.tax_id', ondelete='CASCADE'))
    bio_project = db.Column(db.Text)
    bio_sample = db.Column(db.Text)
    isolate_id = db.Column(db.ForeignKey('antismash.isolates.isolate_id', ondelete='CASCADE'))
    assembly_id = db.Column(db.Text)

    isolate = db.relationship('Isolate', primaryjoin='Genome.isolate_id == Isolate.isolate_id', backref='genomes')
    tax = db.relationship('Taxa', primaryjoin='Genome.tax_id == Taxa.tax_id', backref='genomes')



class Isolate(db.Model):
    __tablename__ = 'isolates'
    __table_args__ = {'schema': 'antismash'}

    isolate_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    sample_id = db.Column(db.ForeignKey('antismash.samples.sample_id'))

    sample = db.relationship('Sample', primaryjoin='Isolate.sample_id == Sample.sample_id', backref='isolates')



class ModuleDomainFunction(db.Model):
    __tablename__ = 'module_domain_functions'
    __table_args__ = {'schema': 'antismash'}

    function_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    function = db.Column(db.Text, nullable=False)



class Module(db.Model):
    __tablename__ = 'modules'
    __table_args__ = {'schema': 'antismash'}

    module_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    location = db.Column(db.Text, nullable=False)
    type = db.Column(db.Text, nullable=False)
    trans_at = db.Column(db.Boolean, nullable=False)
    complete = db.Column(db.Boolean, nullable=False)
    iterative = db.Column(db.Boolean, nullable=False)
    multi_gene = db.Column(db.Boolean, nullable=False)
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'))

    region = db.relationship('Region', primaryjoin='Module.region_id == Region.region_id', backref='modules')



class Monomer(db.Model):
    __tablename__ = 'monomers'
    __table_args__ = {'schema': 'antismash'}

    monomer_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    substrate_id = db.Column(db.ForeignKey('antismash.substrates.substrate_id'), nullable=False)
    name = db.Column(db.Text, nullable=False, unique=True)
    description = db.Column(db.Text)

    substrate = db.relationship('Substrate', primaryjoin='Monomer.substrate_id == Substrate.substrate_id', backref='monomers')



class PfamDomain(db.Model):
    __tablename__ = 'pfam_domains'
    __table_args__ = {'schema': 'antismash'}

    pfam_domain_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    database = db.Column(db.Text)
    detection = db.Column(db.Text)
    score = db.Column(db.Float(53))
    evalue = db.Column(db.Float(53))
    translation = db.Column(db.Text)
    pfam_id = db.Column(db.ForeignKey('antismash.pfams.pfam_id', ondelete='CASCADE'))
    location = db.Column(db.Text)
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), index=True)

    cds = db.relationship('Cds', primaryjoin='PfamDomain.cds_id == Cds.cds_id', backref='pfam_domains')
    pfam = db.relationship('Pfam', primaryjoin='PfamDomain.pfam_id == Pfam.pfam_id', backref='pfam_domains')



t_pfam_go_entries = db.Table(
    'pfam_go_entries',
    db.Column('pfam_domain_id', db.ForeignKey('antismash.pfam_domains.pfam_domain_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    db.Column('go_id', db.ForeignKey('antismash.gene_ontologies.go_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    schema='antismash'
)



class Pfam(db.Model):
    __tablename__ = 'pfams'
    __table_args__ = {'schema': 'antismash'}

    pfam_id = db.Column(db.Text, primary_key=True)
    name = db.Column(db.Text)
    description = db.Column(db.Text)
    trusted_cutoff = db.Column(db.Float(53))
    version = db.Column(db.Integer)



class ProfileHit(db.Model):
    __tablename__ = 'profile_hits'
    __table_args__ = {'schema': 'antismash'}

    profile_hit_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), index=True)
    name = db.Column(db.ForeignKey('antismash.profiles.name'))
    evalue = db.Column(db.Float(53))
    bitscore = db.Column(db.Float(53))
    seeds = db.Column(db.Integer)

    cds = db.relationship('Cds', primaryjoin='ProfileHit.cds_id == Cds.cds_id', backref='profile_hits')
    profile = db.relationship('Profile', primaryjoin='ProfileHit.name == Profile.name', backref='profile_hits')



class Profile(db.Model):
    __tablename__ = 'profiles'
    __table_args__ = {'schema': 'antismash'}

    name = db.Column(db.Text, primary_key=True)
    description = db.Column(db.Text)
    cutoff = db.Column(db.Integer)
    filename = db.Column(db.Text)



class Protocluster(db.Model):
    __tablename__ = 'protoclusters'
    __table_args__ = {'schema': 'antismash'}

    protocluster_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    region_id = db.Column(db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'), nullable=False)
    location = db.Column(db.Text, nullable=False)
    bgc_type_id = db.Column(db.ForeignKey('antismash.bgc_types.bgc_type_id'), nullable=False)

    bgc_type = db.relationship('BgcType', primaryjoin='Protocluster.bgc_type_id == BgcType.bgc_type_id', backref='protoclusters')
    region = db.relationship('Region', primaryjoin='Protocluster.region_id == Region.region_id', backref='protoclusters')



class Region(db.Model):
    __tablename__ = 'regions'
    __table_args__ = {'schema': 'antismash'}

    region_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    accession = db.Column(db.ForeignKey('antismash.dna_sequences.accession', ondelete='CASCADE'), nullable=False)
    region_number = db.Column(db.Integer)
    location = db.Column(db.Text)
    start_pos = db.Column(db.Integer)
    end_pos = db.Column(db.Integer)
    contig_edge = db.Column(db.Boolean)

    dna_sequence = db.relationship('DnaSequence', primaryjoin='Region.accession == DnaSequence.accession', backref='regions')



class RegulatorConfidence(db.Model):
    __tablename__ = 'regulator_confidence'
    __table_args__ = {'schema': 'antismash'}

    confidence_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text, nullable=False, unique=True)
    strength = db.Column(db.SmallInteger, nullable=False)



class Regulator(db.Model):
    __tablename__ = 'regulators'
    __table_args__ = {'schema': 'antismash'}

    regulator_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text, unique=True)
    description = db.Column(db.Text)



t_rel_as_domain_to_subtype = db.Table(
    'rel_as_domain_to_subtype',
    db.Column('as_domain_id', db.ForeignKey('antismash.as_domains.as_domain_id'), primary_key=True, nullable=False),
    db.Column('subtype', db.ForeignKey('antismash.as_domain_subtypes.subtype'), primary_key=True, nullable=False),
    schema='antismash'
)



class RelAsDomainsSubstrate(db.Model):
    __tablename__ = 'rel_as_domains_substrates'
    __table_args__ = {'schema': 'antismash'}

    as_domain_id = db.Column(db.ForeignKey('antismash.as_domains.as_domain_id', ondelete='CASCADE'), primary_key=True, nullable=False)
    substrate_id = db.Column(db.ForeignKey('antismash.substrates.substrate_id'), primary_key=True, nullable=False)
    position_in_domain = db.Column(db.Integer)

    as_domain = db.relationship('AsDomain', primaryjoin='RelAsDomainsSubstrate.as_domain_id == AsDomain.as_domain_id', backref='rel_as_domains_substrates')
    substrate = db.relationship('Substrate', primaryjoin='RelAsDomainsSubstrate.substrate_id == Substrate.substrate_id', backref='rel_as_domains_substrates')



t_rel_candidates_modules = db.Table(
    'rel_candidates_modules',
    db.Column('candidate_id', db.ForeignKey('antismash.candidates.candidate_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    db.Column('module_id', db.ForeignKey('antismash.modules.module_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    schema='antismash'
)



t_rel_candidates_protoclusters = db.Table(
    'rel_candidates_protoclusters',
    db.Column('candidate_id', db.ForeignKey('antismash.candidates.candidate_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    db.Column('protocluster_id', db.ForeignKey('antismash.protoclusters.protocluster_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    schema='antismash'
)



t_rel_candidates_types = db.Table(
    'rel_candidates_types',
    db.Column('candidate_id', db.ForeignKey('antismash.candidates.candidate_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    db.Column('bgc_type_id', db.ForeignKey('antismash.bgc_types.bgc_type_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    schema='antismash'
)



t_rel_cds_candidates = db.Table(
    'rel_cds_candidates',
    db.Column('candidate_id', db.ForeignKey('antismash.candidates.candidate_id'), primary_key=True, nullable=False),
    db.Column('cds_id', db.ForeignKey('antismash.cdss.cds_id'), primary_key=True, nullable=False),
    schema='antismash'
)



t_rel_cds_protoclusters = db.Table(
    'rel_cds_protoclusters',
    db.Column('protocluster_id', db.ForeignKey('antismash.protoclusters.protocluster_id'), primary_key=True, nullable=False),
    db.Column('cds_id', db.ForeignKey('antismash.cdss.cds_id'), primary_key=True, nullable=False),
    schema='antismash'
)



class RelModulesMonomer(db.Model):
    __tablename__ = 'rel_modules_monomers'
    __table_args__ = {'schema': 'antismash'}

    module_id = db.Column(db.ForeignKey('antismash.modules.module_id', ondelete='CASCADE'), primary_key=True, nullable=False)
    substrate = db.Column(db.ForeignKey('antismash.substrates.substrate_id'), primary_key=True, nullable=False)
    monomer = db.Column(db.ForeignKey('antismash.monomers.monomer_id'), primary_key=True, nullable=False)

    module = db.relationship('Module', primaryjoin='RelModulesMonomer.module_id == Module.module_id', backref='rel_modules_monomers')
    monomer1 = db.relationship('Monomer', primaryjoin='RelModulesMonomer.monomer == Monomer.monomer_id', backref='rel_modules_monomers')
    substrate1 = db.relationship('Substrate', primaryjoin='RelModulesMonomer.substrate == Substrate.substrate_id', backref='rel_modules_monomers')



t_rel_regions_types = db.Table(
    'rel_regions_types',
    db.Column('region_id', db.ForeignKey('antismash.regions.region_id', ondelete='CASCADE'), primary_key=True, nullable=False),
    db.Column('bgc_type_id', db.ForeignKey('antismash.bgc_types.bgc_type_id'), primary_key=True, nullable=False),
    schema='antismash'
)



class ResfamDomain(db.Model):
    __tablename__ = 'resfam_domains'
    __table_args__ = {'schema': 'antismash'}

    resfam_domain_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    score = db.Column(db.Float(53))
    evalue = db.Column(db.Float(53))
    resfam_id = db.Column(db.ForeignKey('antismash.resfams.resfam_id', ondelete='CASCADE'), nullable=False)
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), nullable=False, index=True)

    cds = db.relationship('Cds', primaryjoin='ResfamDomain.cds_id == Cds.cds_id', backref='resfam_domains')
    resfam = db.relationship('Resfam', primaryjoin='ResfamDomain.resfam_id == Resfam.resfam_id', backref='resfam_domains')



class Resfam(db.Model):
    __tablename__ = 'resfams'
    __table_args__ = {'schema': 'antismash'}

    resfam_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    accession = db.Column(db.Text, nullable=False)
    name = db.Column(db.Text, nullable=False)
    description = db.Column(db.Text, nullable=False)



class Ripp(db.Model):
    __tablename__ = 'ripps'
    __table_args__ = {'schema': 'antismash'}

    protocluster_id = db.Column(db.ForeignKey('antismash.protoclusters.protocluster_id', ondelete='CASCADE'), primary_key=True, nullable=False)
    peptide_sequence = db.Column(db.Text, index=True)
    molecular_weight = db.Column(db.Float)
    monoisotopic_mass = db.Column(db.Float)
    alternative_weights = db.Column(db.Text)
    bridges = db.Column(db.Integer)
    _class = db.Column('class', db.Text)
    subclass = db.Column(db.Text)
    score = db.Column(db.Float(53))
    locus_tag = db.Column(db.Text, primary_key=True, nullable=False, index=True)
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), nullable=False)

    cds = db.relationship('Cds', primaryjoin='Ripp.cds_id == Cds.cds_id', backref='ripps')
    protocluster = db.relationship('Protocluster', primaryjoin='Ripp.protocluster_id == Protocluster.protocluster_id', backref='ripps')



class Sample(db.Model):
    __tablename__ = 'samples'
    __table_args__ = {'schema': 'antismash'}

    sample_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    habitat = db.Column(db.Text)
    time = db.Column(db.Text)
    site_id = db.Column(db.ForeignKey('antismash.sampling_sites.site_id'))

    site = db.relationship('SamplingSite', primaryjoin='Sample.site_id == SamplingSite.site_id', backref='samples')



class SamplingSite(db.Model):
    __tablename__ = 'sampling_sites'
    __table_args__ = {'schema': 'antismash'}

    site_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())



t_sequence_gc_content = db.Table(
    'sequence_gc_content',
    db.Column('accession', db.Text),
    db.Column('gc_content', db.Numeric),
    schema='antismash'
)



t_sequence_lengths = db.Table(
    'sequence_lengths',
    db.Column('accession', db.Text),
    db.Column('seq_length', db.Integer),
    schema='antismash'
)



class SmcogHit(db.Model):
    __tablename__ = 'smcog_hits'
    __table_args__ = {'schema': 'antismash'}

    smcog_id = db.Column(db.ForeignKey('antismash.smcogs.smcog_id'), primary_key=True, nullable=False)
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), primary_key=True, nullable=False, index=True)
    score = db.Column(db.Float(53))
    evalue = db.Column(db.Float(53))
    image_path = db.Column(db.Text)

    cds = db.relationship('Cds', primaryjoin='SmcogHit.cds_id == Cds.cds_id', backref='smcog_hits')
    smcog = db.relationship('Smcog', primaryjoin='SmcogHit.smcog_id == Smcog.smcog_id', backref='smcog_hits')



class Smcog(db.Model):
    __tablename__ = 'smcogs'
    __table_args__ = {'schema': 'antismash'}

    smcog_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text)
    description = db.Column(db.Text)
    functional_class_id = db.Column(db.ForeignKey('antismash.functional_classes.functional_class_id'))

    functional_class = db.relationship('FunctionalClass', primaryjoin='Smcog.functional_class_id == FunctionalClass.functional_class_id', backref='smcogs')



class Substrate(db.Model):
    __tablename__ = 'substrates'
    __table_args__ = {'schema': 'antismash'}

    substrate_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text, unique=True)
    description = db.Column(db.Text)



class T2pk(db.Model):
    __tablename__ = 't2pks'
    __table_args__ = {'schema': 'antismash'}

    t2pks_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    protocluster_id = db.Column(db.ForeignKey('antismash.protoclusters.protocluster_id', ondelete='CASCADE'), nullable=False)

    protocluster = db.relationship('Protocluster', primaryjoin='T2pk.protocluster_id == Protocluster.protocluster_id', backref='t2pks')



class T2pksCdsDomain(db.Model):
    __tablename__ = 't2pks_cds_domain'
    __table_args__ = {'schema': 'antismash'}

    domain_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    t2pks_id = db.Column(db.ForeignKey('antismash.t2pks.t2pks_id', ondelete='CASCADE'), nullable=False)
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), nullable=False)
    profile_id = db.Column(db.ForeignKey('antismash.t2pks_profiles.profile_id', ondelete='CASCADE'), nullable=False)
    protein_type = db.Column(db.Text, nullable=False)
    protein_function = db.Column(db.Text)
    evalue = db.Column(db.Float(53), nullable=False)
    bitscore = db.Column(db.Float(53), nullable=False)

    cds = db.relationship('Cds', primaryjoin='T2pksCdsDomain.cds_id == Cds.cds_id', backref='t2pks_cds_domains')
    profile = db.relationship('T2pksProfile', primaryjoin='T2pksCdsDomain.profile_id == T2pksProfile.profile_id', backref='t2pks_cds_domains')
    t2pks = db.relationship('T2pk', primaryjoin='T2pksCdsDomain.t2pks_id == T2pk.t2pks_id', backref='t2pks_cds_domains')



class T2pksProductClass(db.Model):
    __tablename__ = 't2pks_product_classes'
    __table_args__ = {'schema': 'antismash'}

    t2pks_id = db.Column(db.ForeignKey('antismash.t2pks.t2pks_id', ondelete='CASCADE'), primary_key=True, nullable=False)
    product_class = db.Column(db.Text, primary_key=True, nullable=False)

    t2pks = db.relationship('T2pk', primaryjoin='T2pksProductClass.t2pks_id == T2pk.t2pks_id', backref='t2pks_product_classes')



class T2pksProduct(db.Model):
    __tablename__ = 't2pks_products'
    __table_args__ = {'schema': 'antismash'}

    product_type = db.Column(db.Text, primary_key=True)
    product_function = db.Column(db.Text)



class T2pksProfile(db.Model):
    __tablename__ = 't2pks_profiles'
    __table_args__ = {'schema': 'antismash'}

    profile_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text, nullable=False, unique=True)
    description = db.Column(db.Text, nullable=False)



class T2pksStarterElongation(db.Model):
    __tablename__ = 't2pks_starter_elongation'
    __table_args__ = {'schema': 'antismash'}

    combo_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    domain_id = db.Column(db.ForeignKey('antismash.t2pks_starters.domain_id', ondelete='CASCADE'), nullable=False)
    elongation = db.Column(db.Integer, nullable=False)
    weight = db.Column(db.Float, nullable=False)

    domain = db.relationship('T2pksStarter', primaryjoin='T2pksStarterElongation.domain_id == T2pksStarter.domain_id', backref='t2pks_starter_elongations')



class T2pksStarter(db.Model):
    __tablename__ = 't2pks_starters'
    __table_args__ = {'schema': 'antismash'}

    domain_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    t2pks_id = db.Column(db.ForeignKey('antismash.t2pks.t2pks_id', ondelete='CASCADE'), nullable=False)
    name = db.Column(db.Text, nullable=False)
    evalue = db.Column(db.Float(53), nullable=False)
    bitscore = db.Column(db.Float(53), nullable=False)

    t2pks = db.relationship('T2pk', primaryjoin='T2pksStarter.t2pks_id == T2pk.t2pks_id', backref='t2pks_starters')



class Taxa(db.Model):
    __tablename__ = 'taxa'
    __table_args__ = {'schema': 'antismash'}

    tax_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    ncbi_taxid = db.Column(db.Integer)
    superkingdom = db.Column(db.Text)
    kingdom = db.Column(db.Text)
    phylum = db.Column(db.Text)
    _class = db.Column('class', db.Text)
    taxonomic_order = db.Column(db.Text)
    family = db.Column(db.Text)
    genus = db.Column(db.Text)
    species = db.Column(db.Text)
    strain = db.Column(db.Text)
    name = db.Column(db.Text, nullable=False, unique=True)



class TigrfamDomain(db.Model):
    __tablename__ = 'tigrfam_domains'
    __table_args__ = {'schema': 'antismash'}

    tigrfam_domain_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    database = db.Column(db.Text)
    detection = db.Column(db.Text)
    score = db.Column(db.Float(53))
    evalue = db.Column(db.Float(53))
    translation = db.Column(db.Text)
    tigrfam_id = db.Column(db.ForeignKey('antismash.tigrfams.tigrfam_id', ondelete='CASCADE'))
    location = db.Column(db.Text)
    cds_id = db.Column(db.ForeignKey('antismash.cdss.cds_id', ondelete='CASCADE'), index=True)

    cds = db.relationship('Cds', primaryjoin='TigrfamDomain.cds_id == Cds.cds_id', backref='tigrfam_domains')
    tigrfam = db.relationship('Tigrfam', primaryjoin='TigrfamDomain.tigrfam_id == Tigrfam.tigrfam_id', backref='tigrfam_domains')



class Tigrfam(db.Model):
    __tablename__ = 'tigrfams'
    __table_args__ = {'schema': 'antismash'}

    tigrfam_id = db.Column(db.Text, primary_key=True)
    name = db.Column(db.Text)
    description = db.Column(db.Text)
    trusted_cutoff = db.Column(db.Float(53))



class TtaCodon(db.Model):
    __tablename__ = 'tta_codons'
    __table_args__ = {'schema': 'antismash'}

    tta_codon_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    seq_id = db.Column(db.ForeignKey('antismash.dna_sequences.accession', ondelete='CASCADE'), nullable=False)
    location = db.Column(db.Text, nullable=False)

    seq = db.relationship('DnaSequence', primaryjoin='TtaCodon.seq_id == DnaSequence.accession', backref='tta_codons')
